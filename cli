#!/usr/bin/env bash
# CXE powered Software Development Kit

readonly CXE_NAME="${CXE_NAME:-cxe}"
readonly CXE_ABBR="$(echo "$CXE_NAME" | tr [:lower:] [:upper:])"
readonly CXE_VERSION="0.2.1"
readonly CXE_COMMAND="/usr/local/bin/${CXE_NAME}"
readonly CXE_PROFILE="${HOME:-~}/.${CXE_NAME}/profile"
readonly CXE_ERROR_CONFLICT=1
readonly CXE_ERROR_FORBIDDEN=2

# return the current branch name
function _gitBranch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# convert string to lowercase
function _lowercase() {
    echo "$*" | tr '[:upper:]' '[:lower:]'
}

# convert string to uppercase
function _uppercase() {
    echo "$*" | tr '[:lower:]' '[:upper:]'
}

function _exit() {
    echo "$CXE_ABBR Error ($1): ${@:2}"
    exit $1
}

if [[ "$DOCKER_IMAGE" ]]; then
    PS1="\e[0;34m$DOCKER_IMAGE \w> \e[m"

else

    function --version() {
        echo "$CXE_VERSION"
    }

    function --help() {
        local functionNames="$(declare -F)"
        IFS=$'\n' read -rd '' -a functionNames <<<"${functionNames//declare -f /}"

        text=(
            "$(echo -e "\033[34;1m")"
            "${CXE_ABBR} Software Development Kit v${CXE_VERSION}"
            "$(echo -e "\033[0;34m")"
            "Usage: $(echo -e "\033[36m" "$CXE_NAME <COMMAND|DOCKER_IMAGE> <ARGS>" "\033[34m")"
            ''
            'COMMAND: any of'
        )
        for functionName in ${functionNames[@]}; do
            [[ "${functionName:0:1}" != "_" ]] && text+=("â€¢ $functionName")
        done

        text+=("$(echo -e "\033[0m")")
        local IFS=$'\n'
        echo "${text[*]}"
    }

    # install the command
    function --install() {
        if [[ -d "$CXE_DIR" ]] && [[ -f "$CXE_DIR/cli" ]] && [[ -L "$CXE_COMMAND" ]]; then
            echo -n "already "
        else
            mkdir -p ~/.cxe

            # reuse some settings (if a profile still exists)
            if [[ -f "$CXE_PROFILE" ]]; then
                source "$CXE_PROFILE"
            fi

            # regenerate and save profile
            data=(
                "# v$CXE_VERSION $(date '+%Y-%m-%d %H:%M')"
                "export CXE_DIR='$( cd "$(dirname "$0")" ; pwd -P )'"
                "export CXE_DEFAULT_AUTHOR='${CXE_DEFAULT_AUTHOR:-"$(whoami)"}'"
                'export PATH="$PATH:$CXE_DIR"'
            )
            local IFS=$'\n'; echo "${data[*]}" >$CXE_PROFILE

            # add to bash-profile (if not already there)
            if ! grep -q "cxe/profile" ~/.bash_profile; then
                echo "source '$CXE_PROFILE'" >>~/.bash_profile
            fi

            # load the newly generated profile
            source $CXE_PROFILE

            # expose command
            if [[ ! -f "$CXE_COMMAND" ]] && [[ ! -L "$CXE_COMMAND" ]]; then
                ln -s "$CXE_DIR/cli" "$CXE_COMMAND"
            else
                _exit $CXE_ERROR_CONFLICT "'$CXE_COMMAND' already exits. Aborting."
            fi
        fi
        echo "sucessfully installed $CXE_ABBR $CXE_VERSION: $CXE_COMMAND"
    }

    # uninstall the command
    function --uninstall() {
        [[ -L "$CXE_COMMAND" ]] && unlink "$CXE_COMMAND"
        [[ -f "$CXE_PROFILE" ]] && unlink "$CXE_PROFILE"
        export PATH="$(echo "${PATH//:$CXE_DIR/}")" # remove from PATH
        export CXE_DIR=
        hash -r
        echo "uninstalled $CXE_ABBR"
    }

    if [ "$1" ]; then
        if [[ "$(type -t -- "$1")" ]]; then
            [[ "${1:0:1}" == "_" ]] && _exit $CXE_ERROR_FORBIDDEN "restricted command '$1'"
            "$1" "${@:2}"
        else
            docker run --rm -it \
                -e "DOCKER_IMAGE=$1" \
                -w /app \
                -v $PWD:/app \
                -v $CXE_DIR:/cxe \
                "$1" bash --init-file /cxe/cli
        fi
    else
        --help
    fi
fi
